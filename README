JonDoBrowser Build
=================

For detailed information on JonDoBrowser's building frameworks, please refer to the following wiki.
https://github.com/jondos/jondobrowser-build/wiki


Installing build dependencies
-----------------------------

To build JonDoBrowser, you need a Linux distribution that has support
for runc (such as Debian jessie, Ubuntu 16.04, Fedora 20, etc ...).
On Debian jessie, the runc package is available in backports. On Debian
stretch, the runc package is available in the main repository.

Your user account should have sudo access, which is required to be able
to extract container file systems, start containers and copy files to and
from containers.

The sources of most components are downloaded using git, which needs to
be installed. The sources of webrtc are downloaded using gclient, which
requires GTK+ 2.0 development files and curl to be installed.

You also need a few perl modules installed:
- YAML::XS
- File::Basename
- Getopt::Long
- Template
- IO::Handle
- IO::CaptureOutput
- File::Temp
- Path::Tiny
- File::Path
- File::Copy::Recursive
- String::ShellQuote
- Sort::Versions
- Digest::SHA
- Data::UUID
- Data::Dump

If you are running Debian or Ubuntu, you can install them with:

# apt-get install libyaml-libyaml-perl libtemplate-perl \
                  libio-handle-util-perl libio-all-perl \
                  libio-captureoutput-perl libpath-tiny-perl \
                  libstring-shellquote-perl libsort-versions-perl \
                  libdigest-sha-perl libdata-uuid-perl libdata-dump-perl \
                  libfile-copy-recursive-perl git libgtk2.0-dev curl runc

The build system is based on rbm, which is included as a git submodule
in the rbm/ directory. You can fetch the rbm git submodule by running
'make submodule-update'.


Please keep in mind that this project depends on latest runc.
-------------------------------------------------------------
sudo apt-get install runc currently installs runc 1.0.0-rc2-dev.(As of October 2017)
You need runc 1.0.0-rc4-dev or later version to build jondobrowser.

If you have already installed go 1.9.2, then you can use it to compile latest runc.
(Don't forget to use go1.9 by typing 'gvm use go1.9' into the shell.)

https://github.com/opencontainers/runc/wiki/Ubuntu-14.04---Mint17-and-runc

[https://avatars3.githubusercontent.com/u/12563465?s=400&v=4]<https://github.com/opencontainers/runc/wiki/Ubuntu-14.04---Mint17-and-runc>

Ubuntu 14.04 Mint17 and runc Â· opencontainers/runc Wiki ...<https://github.com/opencontainers/runc/wiki/Ubuntu-14.04---Mint17-and-runc>
github.com
runc - CLI tool for spawning and running containers according to the OCI specification

How to install latest runc from source.
---------------------------------------
Install go1.9.
Download latest runc from here.
Follow the instructions to build and install runc.



Starting a build
----------------

To start a build, run one of the following commands, depending on the
channel you want to build:

  $ make product
  $ make alpha
  $ make beta

Please keep in mind that before running make, you should checkout the specific version you want to build.
This project is still under development and new features and bug fixes are constantly added.
In order for you to quickly build the latest successful versions, we created multiple tags.
  
  $ git tag

This will list all the available version you can build.
e.g. 
  jondobrowser-7.5.1.5
  jondobrowser-7.5.5.51
  jondobrowser-7.5.5.54
  jondobrowser-7.5a1
  jondobrowser-7.5a1.1
  jondobrowser-7.5a1.2
  jondobrowser-7.5a1.3
  jondobrowser-7.5a1.4
  jondobrowser-7.5a1.5
  jondobrowser-7.5a1.6
  jondobrowser-7.5a1.7
  jondobrowser-7.5a5.5.1
  jondobrowser-7.5a5.5.2
  jondobrowser-7.5a5.5.3
  jondobrowser-7.5a5.5.4

Here versions with 'a' are alpha builds and versions without it are product builds.
If you want to build the latest alpha version, then you can do it with the following commands.

  $ git checkout jondobrowser-7.5a5.5.4
  $ make alpha

If you want to build the latest product version, then you can do it with the following commands.

  $ git checkout jondobrowser-7.5.5.54
  $ make product

You can find the build result in the directory product/unsigned/$version
or alpha/unsigned/$version for product or alpha builds.

If you want to build for a specific platform only, append the platform
name to the makefile target:

  $ make alpha-linux-x86_64
  $ make alpha-linux-i686
  $ make alpha-windows-i686
  $ make alpha-osx-x86_64



Updating git sources
--------------------

You can run "make fetch" to fetch the latest sources from git for all
components included in JonDoBrowser. You should run this if you want to
make a nightly build with the latest commits.


Number of make processes
------------------------

By default the builds are run with 4 processes simultaneously (with
make -j4). If you want to change the number of processes used, you can
set the RBM_NUM_PROCS environment variable:

  $ export RBM_NUM_PROCS=8

You can also set the buildconf/num_procs option in rbm.local.conf.


Automated builds
----------------

If the build fails, a shell will automatically open in the build
container to help you debug the problem. You probably want to disable
this if you want to do automated builds. To disable this, set
the RBM_NO_DEBUG environment variable to 1:

   export RBM_NO_DEBUG=1

Or set the debug option to 0 in the rbm.local.conf file.

If you want to select the output directory, you can use rbm's --output-dir
option. You can look at the Makefile to find the rbm command for what
you want to build, and add the --output-dir option. For example, if you
want to build JonDoBrowser nightly for linux-x86_64:

   ./rbm/rbm build release --output-dir=/var/builds/nightly/2017-01-23 \
                        --target nightly --target torbrowser-linux-x86_64

The files will be put in the directory selected by --output-dir in a
subdirectory named as the version number (or current date for nightly).
To remove this version subdirectory, add the noversiondir target:

   ./rbm/rbm build release --output-dir=/var/builds/nightly/2017-01-23 \
                        --target nightly --target torbrowser-linux-x86_64 \
                        --target noversiondir


Automated builds using tbb-testsuite
------------------------------------

The JonDoBrowser testsuite scripts can also be used to do nightly builds
and publish the build logs.

If you want to do that, start by cloning the git repository:

   $ git clone https://git.torproject.org/boklm/tor-browser-bundle-testsuite.git

Install some dependencies:

   # apt-get install -y libdata-dump-perl libfile-slurp-perl \
               libio-captureoutput-perl perlmagick libjson-perl \
               libwww-perl liblwp-protocol-https-perl libtemplate-perl \
               libyaml-syck-perl libdatetime-perl \
               libemail-sender-perl libemail-simple-perl libfile-type-perl \
               libipc-run-perl libxml-libxml-perl

Copy the config/tor-browser_build-boklm file and edit it:

   $ cd tor-browser-bundle-testsuite
   $ cp config/tor-browser_build-boklm config/tor-browser_build-$user
   $ vim config/tor-browser_build-$user

Change the publish_dir and publish_url options. The publish_dir option is
the local directory where the builds will be stored. The publish_url
option is the public URL where the builds will be available.

Copy the tools/tor-browser-builds-boklm file and edit it to change the
--config= option:

   $ cp tools/tor-browser-builds-boklm tools/tor-browser-builds-$user
   $ vim tools/tor-browser-builds-$user

You can now run ./tools/tor-browser-builds-$user to start the build, and
add it to your crontab.

The html build reports will be available in the reports/ directory, and
the build files in the tor-browser-builds/ directory (unless you changed
the publish_dir option).


Signing builds
--------------

If the environment variable RBM_SIGN_BUILD is set to 1, the
sha256sums-unsigned-build.txt file will be signed with gpg.
You can use the RBM_GPG_OPTS environment variable to add some options
to the gpg command used to sign the file. You can also set the
var/sign_build and var/sign_build_gpg_opts options in the rbm.local.conf
file.


Cleaning obsolete files and containers images
---------------------------------------------

You can run 'make clean' to clean old build files and containers that
are no longer used in current builds. Before doing that, you need to
configure the branches and build targets you are using in the
rbm.local.conf file. The cleaning script will check out all the configured
branches to create a list of used build files, and delete the files
from the 'out' directory that are not used. If you want to see the list
of files and containers that would be removed without doing it, you can
use 'make clean-dry-run'.


Common Build Errors
-------------------

You can look at the README.BUILD_ERRORS file for a list of common build
errors and their solutions.


Hacking on the JonDoBrowser build
--------------------------------

The file README.HACKING tries to list the main things to know when
making changes to the JonDoBrowser build.

Description of makefile rules
-----------------------------

You can find a description of the makefile rules in the README.MAKEFILE
file.

